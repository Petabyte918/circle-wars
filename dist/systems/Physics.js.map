{"version":3,"sources":["../../server/systems/Physics.js"],"names":["PhysicsSystem","ticLength","entities","entityKey","physicsExtrapolation","e","components","collider","dynamic","entity","colliders","timeCoefficient","position","velocity","acceleration","collision","Vectors","magnitude","colliderId","id","staticCollider","staticColliderPosition","add","x","offsetX","y","offsetY","checkCollision","mult","drag","vDirection","angle","vMagnitude","vPctMax","max","polarToCartesian","Math","PI","norm","setMagnitude","dirty","entityA","positionA","entityB","positionB","colliderA","colliderB","type","circleRect","circleCircle","rectRect","circle","rect","rectX1","width","rectX2","rectY1","height","rectY2","nearestX","min","nearestY","deltaX","deltaY","radius","abs","circleA","circleB","rectA","rectB"],"mappings":"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","file":"Physics.js","sourcesContent":["import {pick} from 'underscore'\r\nimport {Vectors} from '../Vectors'\r\n\r\nexport class PhysicsSystem {\r\n    ticLength\r\n\r\n    constructor(ticLength) {\r\n        this.ticLength = ticLength || 25\r\n    }\r\n    \r\n    step(entities) {\r\n        for (let entityKey in entities) {\r\n            this.physicsExtrapolation(entities[entityKey], this.ticLength, pick(entities, e => (e.components.collider && !e.components.dynamic)))\r\n        }\r\n    }\r\n\r\n    physicsExtrapolation(entity, ticLength, colliders) {\r\n        const timeCoefficient = ticLength / 25\r\n        let position = entity.components.position\r\n        let velocity = entity.components.velocity\r\n        let acceleration = entity.components.acceleration\r\n        let collision = false\r\n        if (!position) return\r\n        if (!velocity) return\r\n        if (Vectors.magnitude(velocity) === 0 && !acceleration) return\r\n        if (Vectors.magnitude(velocity) === 0 && Vectors.magnitude(acceleration) === 0) return\r\n        for (let colliderId in colliders) {\r\n            if (colliderId === entity.id) continue\r\n            const staticCollider = colliders[colliderId]\r\n            const staticColliderPosition = Vectors.add(colliders[colliderId].components.position, {x: colliders[colliderId].components.collider.offsetX, y: colliders[colliderId].components.collider.offsetY})\r\n            collision = this.checkCollision(entity, Vectors.add(position, Vectors.mult(velocity, timeCoefficient)), staticCollider, staticColliderPosition)\r\n        }\r\n        if (entity.components.drag) {\r\n            const vDirection = Vectors.angle(velocity)\r\n            const vMagnitude = Vectors.magnitude(velocity)\r\n            const vPctMax = vMagnitude / velocity.max\r\n            const drag = Vectors.polarToCartesian(vDirection + Math.PI, vPctMax * acceleration.norm)\r\n\r\n            acceleration = Vectors.add(acceleration, drag)\r\n        }\r\n        if (Vectors.magnitude(acceleration) !== 0) {\r\n            if (collision) {\r\n                if (collision.x > 0) {\r\n                    if (acceleration.x < 0) acceleration.x = 0\r\n                } else if (collision.x < 0) {\r\n                    if (acceleration.x > 0) acceleration.x = 0\r\n                }\r\n                if (collision.y > 0) {\r\n                    if (acceleration.y < 0) acceleration.y = 0\r\n                } else if (collision.y < 0) {\r\n                    if (acceleration.y > 0) acceleration.y = 0\r\n                }\r\n            }\r\n            entity.components.velocity = Vectors.add(velocity,Vectors.mult(acceleration, timeCoefficient))\r\n        }\r\n        if (Vectors.magnitude(velocity) !== 0) {\r\n            if (Vectors.magnitude(entity.components.velocity) > velocity.max) {\r\n                entity.components.velocity = Vectors.setMagnitude(velocity, velocity.max)\r\n            }\r\n            if (Vectors.magnitude(entity.components.velocity) < 0.01) {\r\n                entity.components.velocity.x = 0\r\n                entity.components.velocity.y = 0\r\n            }\r\n            if (collision) {\r\n                if (collision.x > 0) {\r\n                    if (velocity.x < 0) entity.components.velocity.x = 0\r\n                } else if (collision.x < 0) {\r\n                    if (velocity.x > 0) entity.components.velocity.x = 0\r\n                }\r\n                if (collision.y > 0) {\r\n                    if (velocity.y < 0) entity.components.velocity.y = 0\r\n                } else if (collision.y < 0) {\r\n                    if (velocity.y > 0) entity.components.velocity.y = 0\r\n                }\r\n            }\r\n            entity.components.position = Vectors.add(position,Vectors.mult(entity.components.velocity, timeCoefficient))\r\n            entity.components.dynamic.dirty = true\r\n        }\r\n    }\r\n\r\n    checkCollision(entityA, positionA, entityB, positionB) {\r\n        const colliderA = entityA.components.collider\r\n        colliderA.x = positionA.x + colliderA.offsetX\r\n        colliderA.y = positionA.y + colliderA.offsetY\r\n        const colliderB = entityB.components.collider\r\n        colliderB.x = positionB.x + colliderB.offsetX\r\n        colliderB.y = positionB.y + colliderB.offsetY\r\n\r\n        if (colliderA.type === 'circle' && colliderB.type === 'rect') {\r\n            return circleRect(colliderA, colliderB)\r\n        } else if (colliderA.type === 'rect' && colliderB.type === 'circle') {\r\n            return circleRect(colliderB, colliderA)\r\n        } else if (colliderA.type === 'circle' && colliderB.type === 'circle') {\r\n            return circleCircle(colliderA, colliderB)\r\n        } else if (colliderA.type === 'rect' && colliderB.type === 'rect') {\r\n            return rectRect(colliderB, colliderA)\r\n        }\r\n\r\n        function circleRect(circle, rect) {\r\n            const rectX1 = rect.x - rect.width / 2\r\n            const rectX2 = rect.x + rect.width / 2\r\n            const rectY1 = rect.y - rect.height / 2\r\n            const rectY2 = rect.y + rect.height / 2\r\n            const nearestX = Math.max(rect.x - rect.width / 2, Math.min(circle.x, rect.x + rect.width / 2))\r\n            const nearestY = Math.max(rect.y - rect.height / 2, Math.min(circle.y, rect.y + rect.height / 2))\r\n            const deltaX = circle.x - nearestX\r\n            const deltaY = circle.y - nearestY\r\n            if ((deltaX * deltaX + deltaY * deltaY) < (circle.radius * circle.radius)) {\r\n                if (nearestX > rectX1 && nearestX < rectX2) {\r\n                    if (Math.abs(nearestY - rectY1) < Math.abs(nearestY - rectY2)) {\r\n                        return {x:0, y:-1}\r\n                    } else {\r\n                        return {x:0, y:1}\r\n                    }\r\n                } else if (nearestY > rectY1 && nearestY < rectY2) {\r\n                    if (Math.abs(nearestX - rectX1) < Math.abs(nearestX - rectX2)) {\r\n                        return {x:-1,y:0}\r\n                    } else {\r\n                        return {x:1,y:0}\r\n                    }\r\n                } else {\r\n                    if (circle.x < nearestX && circle.y < nearestY) {\r\n                        return {x:-1, y:-1}\r\n                    }\r\n                    if (circle.x > nearestX && circle.y < nearestY) {\r\n                        return {x:1, y:-1}\r\n                    }\r\n                    if (circle.x < nearestX && circle.y > nearestY) {\r\n                        return {x:-1, y:1}\r\n                    }\r\n                    if (circle.x > nearestX && circle.y > nearestY) {\r\n                        return {x:1, y:1}\r\n                    }\r\n                }\r\n            }\r\n            else return false\r\n        }\r\n\r\n        function circleCircle(circleA, circleB) {\r\n\r\n        }\r\n\r\n        function rectRect(rectA, rectB) {\r\n\r\n        }\r\n    }\r\n}"]}